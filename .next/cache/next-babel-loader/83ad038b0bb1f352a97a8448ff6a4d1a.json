{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/alandouglas/Desktop/pluralsight/myapphooks/src/ImageTogglerOnScroll.js\";\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    height: \"200\",\n    width: \"200\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["/home/alandouglas/Desktop/pluralsight/myapphooks/src/ImageTogglerOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAA+B;AAAA,MAA7BC,UAA6B,QAA7BA,UAA6B;AAAA,MAAjBC,YAAiB,QAAjBA,YAAiB;AACxD,MAAMC,QAAQ,GAAEN,MAAM,CAAC,IAAD,CAAtB;;AADwD,kBAEtBE,QAAQ,CAAC,IAAD,CAFc;AAAA,MAEjDK,SAFiD;AAAA,MAEtCC,YAFsC;;AAIxDP,EAAAA,SAAS,CAAC,YAAI;AACVQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACA,WAAO,YAAI;AACPJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GANQ,CAAT;;AAJwD,mBAY7BT,QAAQ,CAAC,KAAD,CAZqB;AAAA,MAYlDa,MAZkD;AAAA,MAY1CH,SAZ0C;;AAcxD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAGP,QAAQ,CAACU,OAAZ,EAAoB;AAChB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAW,CAAX,IAAgBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA7C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAK;AACvBC,IAAAA,SAAS,CAAC,YAAI;AACV,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SACI;AACI,IAAA,GAAG,EAAEE,MAAM,GAAGV,YAAH,GAAkBD,UADjC;AAEI,IAAA,GAAG,EAAC,EAFR;AAEW,IAAA,GAAG,EAAEE,QAFhB;AAE0B,IAAA,MAAM,EAAC,KAFjC;AAEuC,IAAA,KAAK,EAAC,KAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CAlCD;;AAoCA,eAAeH,oBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n\nconst ImageTogglerOnScroll = ({primaryImg, secondaryImg}) =>{\n    const imageRef= useRef(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", scrollHandler);\n        setInView(isInView());\n        return(()=>{\n            window.removeEventListener(\"scroll\", scrollHandler);\n        });\n    });\n\n    const[inView, setInView] = useState(false);\n\n    const isInView = () => {\n        if(imageRef.current){\n            const rect = imageRef.current.getBoundingClientRect();\n            return rect.top >=0 && rect.bottom <= window.innerHeight;\n        }\n        return false;\n    };\n\n    const scrollHandler = () =>{\n        setInView(()=>{\n            return isInView();\n        });\n    };\n\n    return(\n        <img \n            src={inView ? secondaryImg : primaryImg}\n            alt='' ref={imageRef} height=\"200\" width=\"200\"\n        />\n    );\n};\n\nexport default ImageTogglerOnScroll;"]},"metadata":{},"sourceType":"module"}